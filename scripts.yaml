bedtime:
  alias: Bedtime
  sequence:
  - if:
    - condition: state
      entity_id: binary_sensor.min_temp_fans_exceeded
      state: 'on'
    then:
    - type: turn_on
      device_id: 61dd366fd275ffb11aa5f8603580f75c
      entity_id: 1e020847e9336c733fcdbcb2119a437d
      domain: switch
  - service: scene.turn_on
    target:
      entity_id: scene.garden_off
    metadata: {}
  - type: turn_off
    device_id: 994179d72feccd3796a4e876a78cdefe
    entity_id: 2cd01e5cc1d83176ba5ab4c5ce41d5fc
    domain: light
  - service: ifttt.trigger
    data:
      event: HA_trigger_calendar
      value1: Bedtime script run
  - delay:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  - service: scene.turn_on
    target:
      entity_id: scene.overnight_dim
    metadata: {}
  - service: ifttt.trigger
    data:
      event: HA_trigger_sheet
      value1: Bedtime script log
      value2: Zzzzzz ;-)
  mode: single
  icon: mdi:bed
set_min_soc_to_10:
  alias: Set Min SoC to 10%
  sequence:
  - service: number.set_value
    target:
      entity_id: number.workshop_min_soc
    data:
      value: 10
  - service: number.set_value
    target:
      entity_id: number.workshop_min_soc_on_grid
    data:
      value: 10
  mode: single
  icon: mdi:battery-10
'1724255914837':
  alias: Free Electricity Day Tomorrow
  sequence:
  - wait_for_trigger:
    - platform: time
      at: 08:30:00
    continue_on_timeout: false
    timeout:
      hours: 24
      minutes: 0
      seconds: 0
      milliseconds: 0
  - service: select.select_option
    target:
      entity_id: select.workshop_work_mode
    data:
      option: Feed-in First
  - service: foxess_modbus.update_charge_period
    data:
      enable_force_charge: true
      enable_charge_from_grid: true
      start: '{{ states(''input_datetime.free_electricity_start'') }}'
      end: '{{ states(''input_datetime.free_electricity_end'') }}'
      inverter: 1185fbf7ef097c175604da2d3bb46177
      charge_period: '2'
  - service: number.set_value
    target:
      entity_id: number.workshop_max_soc
    data:
      value: '100'
  - wait_for_trigger:
    - platform: time
      at: input_datetime.free_electricity_start
    timeout:
      hours: 6
      minutes: 0
      seconds: 0
      milliseconds: 0
    continue_on_timeout: false
  - service: ifttt.trigger
    data:
      event: HA_trigger_sheet
      value1: Free Electricity Log
      value2: 'Starting with: {{ states(''sensor.workshop_battery_soc'') }}% battery'
      value3: Grid Consumption so far today = {{ states('sensor.workshop_grid_consumption_energy_today')
        }} KWh
  - service: notify.marcus_email
    data:
      message: 'Starting with: {{ states(''sensor.workshop_battery_soc'') }}% battery,
        Grid Consumption so far today = {{states(''sensor.workshop_grid_consumption_energy_today'')
        }} KWh'
      title: Free Electricity START
  - wait_for_trigger:
    - platform: time
      at: input_datetime.free_electricity_end
    timeout:
      hours: 2
      minutes: 0
      seconds: 0
      milliseconds: 0
    continue_on_timeout: true
  - service: select.select_option
    target:
      entity_id: select.workshop_work_mode
    data:
      option: Self Use
  - service: foxess_modbus.update_charge_period
    data:
      enable_force_charge: true
      enable_charge_from_grid: true
      start: '15:00:00'
      end: '15:55:00'
      inverter: 1185fbf7ef097c175604da2d3bb46177
      charge_period: '2'
  - delay:
      hours: 0
      minutes: 0
      seconds: 10
      milliseconds: 0
  - service: foxess_modbus.update_charge_period
    data:
      enable_force_charge: false
      enable_charge_from_grid: true
      start: '15:00:00'
      end: '15:55:00'
      inverter: 1185fbf7ef097c175604da2d3bb46177
      charge_period: '2'
  - service: number.set_value
    target:
      entity_id: number.workshop_max_soc
    data:
      value: '{{ states(''input_number.max_soc_day'') | float() }}'
  - service: ifttt.trigger
    data:
      event: HA_trigger_sheet
      value1: Free Electricity Log
      value2: 'Ending with: {{ states(''sensor.workshop_battery_soc'') }}% battery'
      value3: Grid Consumption now = {{ states('sensor.workshop_grid_consumption_energy_today')
        }} KWh
  - service: notify.marcus_email
    data:
      message: 'Ending with with: {{ states(''sensor.workshop_battery_soc'') }}% battery,
        Grid Consumption now = {{states(''sensor.workshop_grid_consumption_energy_today'')
        }} KWh'
      title: Free Electricity END
  mode: single
  icon: mdi:home-lightning-bolt
'1729422205524':
  alias: Free Electricity Day Today
  sequence:
  - service: select.select_option
    target:
      entity_id: select.workshop_work_mode
    data:
      option: Force Discharge
  - service: foxess_modbus.update_charge_period
    data:
      enable_force_charge: true
      enable_charge_from_grid: true
      start: '{{ states(''input_datetime.free_electricity_start'') }}'
      end: '{{ states(''input_datetime.free_electricity_end'') }}'
      inverter: 1185fbf7ef097c175604da2d3bb46177
      charge_period: '2'
  - service: number.set_value
    target:
      entity_id: number.workshop_max_soc
    data:
      value: '100'
  - wait_for_trigger:
    - platform: time
      at: input_datetime.free_electricity_start
    timeout:
      hours: 6
      minutes: 0
      seconds: 0
      milliseconds: 0
    continue_on_timeout: false
  - service: select.select_option
    target:
      entity_id: select.workshop_work_mode
    data:
      option: Self Use
  - service: ifttt.trigger
    data:
      event: HA_trigger_sheet
      value1: Free Electricity Log
      value2: 'Starting with: {{ states(''sensor.workshop_battery_soc'') }}% battery'
      value3: Grid Consumption so far today = {{ states('sensor.workshop_grid_consumption_energy_today')
        }} KWh
  - service: notify.marcus_email
    data:
      message: 'Starting with: {{ states(''sensor.workshop_battery_soc'') }}% battery,
        Grid Consumption so far today = {{states(''sensor.workshop_grid_consumption_energy_today'')
        }} KWh'
      title: Free Electricity START
  - wait_for_trigger:
    - platform: time
      at: input_datetime.free_electricity_end
    timeout:
      hours: 2
      minutes: 0
      seconds: 0
      milliseconds: 0
    continue_on_timeout: true
  - service: select.select_option
    target:
      entity_id: select.workshop_work_mode
    data:
      option: Self Use
  - service: foxess_modbus.update_charge_period
    data:
      enable_force_charge: true
      enable_charge_from_grid: true
      start: '15:00:00'
      end: '15:55:00'
      inverter: 1185fbf7ef097c175604da2d3bb46177
      charge_period: '2'
  - delay:
      hours: 0
      minutes: 0
      seconds: 10
      milliseconds: 0
  - service: foxess_modbus.update_charge_period
    data:
      enable_force_charge: false
      enable_charge_from_grid: true
      start: '15:00:00'
      end: '15:55:00'
      inverter: 1185fbf7ef097c175604da2d3bb46177
      charge_period: '2'
  - service: number.set_value
    target:
      entity_id: number.workshop_max_soc
    data:
      value: '{{ states(''input_number.max_soc_day'') | float() }}'
  - service: ifttt.trigger
    data:
      event: HA_trigger_sheet
      value1: Free Electricity Log
      value2: 'Ending with: {{ states(''sensor.workshop_battery_soc'') }}% battery'
      value3: Grid Consumption now = {{ states('sensor.workshop_grid_consumption_energy_today')
        }} KWh
  - service: notify.marcus_email
    data:
      message: 'Ending with with: {{ states(''sensor.workshop_battery_soc'') }}% battery,
        Grid Consumption now = {{states(''sensor.workshop_grid_consumption_energy_today'')
        }} KWh'
      title: Free Electricity END
  mode: single
  icon: mdi:home-lightning-bolt
heat_workshop_overnight:
  alias: Heat workshop overnight
  sequence:
  - wait_for_trigger:
    - platform: time
      at: input_datetime.off_peak_energy_start
    timeout:
      hours: 12
      minutes: 0
      seconds: 0
      milliseconds: 0
    continue_on_timeout: false
  - service: ifttt.trigger
    data:
      event: HA_trigger_sheet
      value1: Heater Usage Log
      value2: 'Starting with: {{ states(''sensor.workshop_battery_soc'') }}% battery'
      value3: Grid Consumption so far today = {{ states('sensor.workshop_grid_consumption_energy_today')
        }} KWh
  - service: notify.marcus_email
    data:
      message: 'Starting with energy used, Heater: {{ states(''sensor.heater_today_energy'')
        }} kWh and Fan Heater: {{ states(''sensor.fan_heater_today_energy'') }} kWh
        and Grid Consumption now = {{ states(''sensor.workshop_grid_consumption_energy_today'')
        }} kWh. Fan Heater will be {{ states(''input_boolean.heat_workshop_overnight_include_fan'')
        }}'
      title: Workshop Heater START
  - service: switch.turn_on
    target:
      entity_id:
      - switch.heater
      device_id: []
      area_id: []
    data: {}
  - if:
    - condition: state
      entity_id: input_boolean.heat_workshop_overnight_include_fan
      state: 'on'
    then:
    - service: switch.turn_on
      target:
        entity_id: switch.fan_heater
      data: {}
    else:
    - service: switch.turn_off
      target:
        entity_id: switch.fan_heater
      data: {}
  - wait_for_trigger:
    - platform: time
      at: input_datetime.off_peak_energy_end
    timeout:
      hours: 12
      minutes: 0
      seconds: 0
      milliseconds: 0
    continue_on_timeout: false
  - service: switch.turn_off
    target:
      entity_id:
      - switch.heater
      device_id: []
      area_id: []
    data: {}
  - service: switch.turn_off
    target:
      entity_id: switch.fan_heater
    data: {}
  - service: ifttt.trigger
    data:
      event: HA_trigger_sheet
      value1: Heater Usage Log
      value2: 'Ending with: {{ states(''sensor.workshop_battery_soc'') }}% battery'
      value3: Grid Consumption now = {{ states('sensor.workshop_grid_consumption_energy_today')
        }} KWh | Heater used {{ states('sensor.heater_today_energy') }} kWh | Fan
        Heater used {{ states('sensor.fan_heater_today_energy') }} kWh
  - service: notify.marcus_email
    data:
      message: 'Ending with energy used, Heater: {{ states(''sensor.heater_today_energy'')
        }} kWh and Fan Heater: {{ states(''sensor.fan_heater_today_energy'') }} kWh
        and Grid Consumption now = {{ states(''sensor.workshop_grid_consumption_energy_today'')
        }} kWh. Fan Heater was {{ states(''input_boolean.heat_workshop_overnight_include_fan'')
        }}'
      title: Heater Workshop END
  mode: single
  icon: mdi:radiator
stop_using_battery_set_min_soc_to_current_level:
  alias: Stop using battery (set Min SoC to current level)
  sequence:
  - service: number.set_value
    target:
      entity_id: number.workshop_min_soc
    data:
      value: '{{ states(''sensor.workshop_battery_soc'') }}'
  - service: number.set_value
    target:
      entity_id: number.workshop_min_soc_on_grid
    data:
      value: '{{ states(''sensor.workshop_battery_soc'') }}'
  mode: single
  icon: mdi:battery-off
bedroom_light_marcus_up:
  alias: 'Bedroom Light: Marcus up'
  sequence:
  - service: input_boolean.turn_on
    target:
      entity_id: input_boolean.holiday_bedroom_lamp
    data: {}
  - service: light.turn_off
    target:
      entity_id: light.bedroom_lamp
    data: {}
  - wait_for_trigger:
    - platform: time
      at: input_datetime.bedroom_light_resume_morning
    timeout:
      hours: 4
      minutes: 0
      seconds: 0
      milliseconds: 0
  - service: input_boolean.turn_off
    target:
      entity_id:
      - input_boolean.holiday_bedroom_lamp
      device_id: []
      area_id: []
    data: {}
  mode: single
  icon: mdi:weather-sunset-up
turn_on_cctv_monitor_5_mins:
  sequence:
  - type: turn_on
    device_id: e089e21f12d388d802c0e4178bd386fc
    entity_id: 895db067f32fc3cb9213ae38b659a529
    domain: switch
  - delay:
      hours: 0
      minutes: 5
      seconds: 0
  - type: turn_off
    device_id: e089e21f12d388d802c0e4178bd386fc
    entity_id: 895db067f32fc3cb9213ae38b659a529
    domain: switch
  alias: Turn on CCTV monitor 5 mins
  description: ''
