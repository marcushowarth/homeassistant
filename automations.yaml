- id: '1704106743392'
  alias: 'Energy: Octopus Flux Tariffs'
  description: Sets the tariff
  trigger:
  - platform: time
    at: input_datetime.off_peak_energy_start
    variables:
      tariff: eco
  - platform: time
    at: input_datetime.off_peak_energy_end
    variables:
      tariff: day
  - platform: time
    at: input_datetime.peak_energy_start
    variables:
      tariff: peak
  - platform: time
    at: input_datetime.peak_energy_end
    variables:
      tariff: day
  action:
  - service: select.select_option
    target:
      entity_id: select.grid_consumption_house
    data:
      option: '{{ tariff }}'
  - service: select.select_option
    target:
      entity_id: select.grid_consumption_workshop
    data:
      option: '{{ tariff }}'
  - service: select.select_option
    target:
      entity_id: select.feed_in_house
    data:
      option: '{{ tariff }}'
  - service: select.select_option
    target:
      entity_id: select.feed_in_workshop
    data:
      option: '{{ tariff }}'
  mode: single
- id: '1704185991516'
  alias: 'Energy: Battery Max SoC setting'
  description: Sets the Max SoC according to the time of day based on tariffs using
    the input number values on dashboard
  trigger:
  - platform: time
    at: input_datetime.off_peak_energy_start
    variables:
      maxSoC: '{{ states(''input_number.max_soc_eco'') | float(states(''number.workshop_min_soc''))
        }}'
  - platform: time
    at: input_datetime.off_peak_energy_end
    variables:
      maxSoC: '{{ states(''input_number.max_soc_day'') | float(states(''number.workshop_min_soc''))
        }}'
  - platform: time
    at: input_datetime.peak_energy_start
    variables:
      maxSoC: '{{ states(''input_number.max_soc_peak'') | float(states(''number.workshop_min_soc''))
        }}'
  - platform: time
    at: input_datetime.peak_energy_end
    variables:
      maxSoC: '{{ states(''input_number.max_soc_day'') | float(states(''number.workshop_min_soc''))
        }}'
  condition: []
  action:
  - service: number.set_value
    target:
      entity_id: number.workshop_max_soc
    data:
      value: '{{ maxSoC }}'
  mode: single
- id: '1706128884321'
  alias: 'Energy: Flux tariff: Work Mode around peak tariff times when Force exporting'
  description: Sets the inverter's Work Mode at start and end of peak tariff times
  triggers:
  - at: input_datetime.peak_energy_start
    variables:
      workmode: Force Discharge
    trigger: time
  - at: input_datetime.peak_energy_end
    variables:
      workmode: Self Use
    trigger: time
  conditions:
  - condition: state
    entity_id: input_boolean.peak_tariff_export_enabled
    state: 'on'
  actions:
  - target:
      entity_id: select.workshop_work_mode
    data:
      option: '{{ workmode }}'
    action: select.select_option
  mode: single
- id: '1712635069259'
  alias: Trigger from IFTTT Webhook to call HA service
  description: ''
  triggers:
  - event_type: ifttt_webhook_received
    event_data:
      action: call_service
    trigger: event
  conditions: []
  actions:
  - data:
      message: 'IFTTT webhook to service: "Trigger from IFTTT Webhook: {{ trigger.event.data.service
        }} entity_id {{trigger.event.data.entity_id }}"'
    action: logbook.log
  - target:
      entity_id: '{{ trigger.event.data.entity_id }}'
    action: '{{ trigger.event.data.service }}'
  mode: single
- id: '1718360862145'
  alias: 'Energy: Battery Min SoC setting'
  description: Sets the Min SoC according to the time of day based on tariffs using
    the input number values on dashboard
  trigger:
  - platform: time
    at: input_datetime.off_peak_energy_start
    variables:
      minSoC: '{{ float(states(''input_number.min_soc_eco'')) }}'
  - platform: time
    at: input_datetime.off_peak_energy_end
    variables:
      minSoC: '{{ float(states(''input_number.min_soc_day'')) }}'
  - platform: time
    at: input_datetime.peak_energy_start
    variables:
      minSoC: '{{ float(states(''input_number.min_soc_peak'')) }}'
  - platform: time
    at: input_datetime.peak_energy_end
    variables:
      minSoC: '{{ float(states(''input_number.min_soc_day'')) }}'
  condition: []
  action:
  - service: number.set_value
    target:
      entity_id: number.workshop_min_soc
    data:
      value: '{{ minSoC }}'
  - service: number.set_value
    target:
      entity_id: number.workshop_min_soc_on_grid
    data:
      value: '{{ minSoC }}'
  mode: single
- id: '1718709626558'
  alias: 'Energy: Battery Switch Work mode from Force Discharge to Feed-in First -
    when target Force Discharge SoC level achieved'
  description: Sets the work mode back to Feed-in First (from Force Discharge) once
    the target SoC acheived. - it 'polls' every 5 minutes during the 16th, 17th &
    18th hours to check condition
  trigger:
  - platform: time_pattern
    hours: 16
    minutes: /5
  - platform: time_pattern
    hours: 17
    minutes: /5
  - platform: time_pattern
    hours: 18
    minutes: /5
  condition:
  - and:
    - condition: template
      value_template: '{{ states(''select.workshop_work_mode'') == ''Force Discharge''
        }}'
    - condition: template
      value_template: '{{ states(''sensor.workshop_battery_soc'')|float(0) <= states(''input_number.target_soc_force_export'')|float(0)
        }}'
  action:
  - variables:
      workmode: Feed-in First
  - service: select.select_option
    target:
      entity_id: select.workshop_work_mode
    data:
      option: '{{ workmode }}'
  mode: single
- id: '1719987517277'
  alias: 'Energy: Battery: Enable 2nd charge period before Peak Tariff period'
  description: Sets the 2nd charge period to enable in the hour before the peak tariff
    if SoC below Max SoC minus Daytime Charge Offset %
  trigger:
  - platform: time_pattern
    hours: 15
    minutes: /5
  condition:
  - and:
    - condition: template
      value_template: '{{ states(''binary_sensor.workshop_time_period_2_enable_force_charge'')
        == ''off'' }}'
    - condition: template
      value_template: "{{ states('sensor.workshop_battery_soc')|float(0) <=\n   states('number.workshop_max_soc')|float(0)
        -\n   states('input_number.daytime_charge_offset')|float(0) }}"
  action:
  - service: foxess_modbus.update_charge_period
    data:
      inverter: 1185fbf7ef097c175604da2d3bb46177
      charge_period: '2'
      enable_charge_from_grid: true
      enable_force_charge: true
      start: '15:00:00'
      end: '15:55:00'
  - service: ifttt.trigger
    data:
      event: HA_trigger_sheet
      value1: Daytime pre-PEAK charge log
      value2: Grid Consumption so far today = {{ states('sensor.workshop_grid_consumption_energy_today')
        }} KWh
      value3: Enabled at {{ states('sensor.workshop_battery_soc') }}%
  mode: single
- id: '1719987790324'
  alias: 'Energy: Battery: Disable 2nd charge period before the Peak Tarriff'
  description: Disables the 2nd charge period if SoC >= the batteries current Max
    SoC % in hour before peak tarriff
  trigger:
  - platform: time_pattern
    hours: 15
    minutes: /5
  - platform: time
    at: '16:00:00'
  condition:
  - and:
    - condition: template
      value_template: '{{ states(''binary_sensor.workshop_time_period_2_enable_force_charge'')
        == ''on'' }}'
    - condition: template
      value_template: "{{ states('sensor.workshop_battery_soc')|float(0) >=\n   states('number.workshop_max_soc')|float(0)
        }}"
  action:
  - service: foxess_modbus.update_charge_period
    data:
      inverter: 1185fbf7ef097c175604da2d3bb46177
      charge_period: '2'
      enable_charge_from_grid: true
      enable_force_charge: false
      start: '15:00:00'
      end: '15:55:00'
  - service: ifttt.trigger
    data:
      event: HA_trigger_sheet
      value1: Daytime pre-PEAK charge log
      value2: Grid Consumption so far today = {{ states('sensor.workshop_grid_consumption_energy_today')
        }} KWh
      value3: Disabled at {{ states('sensor.workshop_battery_soc') }}%
  mode: single
- id: '1720625260635'
  alias: 'Energy: Battery: Enable 1st charge period during Eco Tariff period'
  description: Enables the 1st charge period if SoC below Max SoC minus ECO Charge
    Offset %
  trigger:
  - platform: time_pattern
    hours: 2
    minutes: /5
  - platform: time_pattern
    hours: 3
    minutes: /5
  - platform: time_pattern
    hours: 4
    minutes: /5
  condition:
  - and:
    - condition: template
      value_template: '{{ states(''binary_sensor.workshop_time_period_1_enable_force_charge'')
        == ''off'' }}'
    - condition: template
      value_template: "{{ states('sensor.workshop_battery_soc')|float(0) <=\n   states('number.workshop_max_soc')|float(0)
        -\n   states('input_number.eco_charge_offset')|float(0) }}"
  action:
  - service: foxess_modbus.update_charge_period
    data:
      inverter: 1185fbf7ef097c175604da2d3bb46177
      charge_period: '1'
      enable_charge_from_grid: true
      enable_force_charge: true
      start: 02:00:00
      end: 04:55:00
  - service: ifttt.trigger
    data:
      event: HA_trigger_sheet
      value1: Overnight ECO charge log
      value2: Grid Consumption so far today = {{ states('sensor.workshop_grid_consumption_energy_today')
        }} KWh
      value3: Enabled at {{ states('sensor.workshop_battery_soc') }}%
  mode: single
- id: '1720626084395'
  alias: 'Energy: Battery: Disable 1st charge period during Eco Tariff period'
  description: Disables the 1st charge period if SoC >= the batteries current Max
    SoC %
  trigger:
  - platform: time_pattern
    hours: 2
    minutes: /5
  - platform: time_pattern
    hours: 3
    minutes: /5
  - platform: time_pattern
    hours: 4
    minutes: /5
  - platform: time
    at: 05:00:00
  condition:
  - and:
    - condition: template
      value_template: '{{ states(''binary_sensor.workshop_time_period_1_enable_force_charge'')
        == ''on'' }}'
    - condition: template
      value_template: "{{ states('sensor.workshop_battery_soc')|float(0) >=\n   states('number.workshop_max_soc')|float(0)
        }}"
  action:
  - service: foxess_modbus.update_charge_period
    data:
      inverter: 1185fbf7ef097c175604da2d3bb46177
      charge_period: '1'
      enable_charge_from_grid: true
      enable_force_charge: false
      start: 02:00:00
      end: 04:55:00
  - service: ifttt.trigger
    data:
      event: HA_trigger_sheet
      value1: Overnight ECO charge log
      value2: Grid Consumption so far today = {{ states('sensor.workshop_grid_consumption_energy_today')
        }} KWh
      value3: Disabled at {{ states('sensor.workshop_battery_soc') }}%
  mode: single
- id: '1722951908479'
  alias: 'Energy: Battery Switch Work mode from Feed-in First to Self Use - below
    target Force Discharge SoC level'
  description: Sets the work mode back to Self Use if workmode is Feed-in First and
    the SoC is below the target SoC - it 'polls' every 5 minutes during the 16th,
    17th & 18th hours to check condition
  trigger:
  - platform: time_pattern
    hours: 16
    minutes: /5
  - platform: time_pattern
    hours: 17
    minutes: /5
  - platform: time_pattern
    hours: 18
    minutes: /5
  condition:
  - and:
    - condition: template
      value_template: '{{ states(''select.workshop_work_mode'') == ''Feed-in First''
        }}'
    - condition: template
      value_template: '{{ states(''sensor.workshop_battery_soc'')|float(0) < states(''input_number.target_soc_force_export'')|float(0)
        }}'
  action:
  - variables:
      workmode: Self Use
  - service: select.select_option
    target:
      entity_id: select.workshop_work_mode
    data:
      option: '{{ workmode }}'
  mode: single
- id: '1723828018073'
  alias: IFTTT adds row to spreadsheet and calender when batteries fully charged
  description: using IFTTT
  triggers:
  - minutes: /5
    trigger: time_pattern
  conditions:
  - and:
    - condition: template
      value_template: '{{ states(''input_boolean.battery_full_today'') == ''off''
        }}'
    - condition: template
      value_template: '{{ states(''sensor.workshop_battery_soc'')|float(0) == 100
        }}'
  actions:
  - data:
      event: HA_trigger_sheet
      value1: Battery Log - fully charged
      value2: '{% for state in states.weather -%} {%- if loop.first %}The {% elif
        loop.last %} and the {% else %}, the {% endif -%} {{ state.name | lower }}
        is {{state.state_with_unit}} {%- endfor %}.'
      value3: '{% if is_state("sun.sun", "above_horizon") -%}  The sun rose {{ relative_time(states.sun.sun.last_changed)
        }} ago. {%- else -%} The sun will rise at {{ as_timestamp(state_attr("sun.sun",
        "next_rising")) | timestamp_local }}. {%- endif %} '
    action: ifttt.trigger
  - data:
      event: HA_trigger_calendar
      value1: Batteries 100%
      value2: 14 Farmington Ave, Sutton SM1 3PT
    action: ifttt.trigger
  - target:
      entity_id: input_boolean.battery_full_today
    data: {}
    action: input_boolean.turn_on
  - data:
      title: Batteries charged
      message: Batteries reached 100%
    action: notify.marcus_email
  mode: single
- id: '1723995992121'
  alias: Energy - Reset Battery Full Flag
  description: ''
  triggers:
  - at: 00:00:00
    trigger: time
  - event: sunrise
    offset: 0
    trigger: sun
  conditions: []
  actions:
  - target:
      entity_id: input_boolean.battery_full_today
    data: {}
    action: input_boolean.turn_off
  mode: single
- id: '1724261138857'
  alias: Calendar IFTTT Marcus enter RRRC
  description: ''
  triggers:
  - device_id: 324998ffb948ed02379e230c280bc738
    domain: device_tracker
    entity_id: 98354a31bf3665ee1d1caba68923e38f
    type: enters
    zone: zone.recycle_centre
    trigger: device
  conditions: []
  actions:
  - data:
      event: HA_trigger_calendar
      value1: Entered Recycle Centre Kimpton RRRC
      value2: Kimpton Park Way Re-Use and Recycling Centre
    action: ifttt.trigger
  mode: single
- id: '1724261205032'
  alias: Calendar IFTTT Marcus enter Screwfix
  description: ''
  triggers:
  - device_id: 324998ffb948ed02379e230c280bc738
    domain: device_tracker
    entity_id: 98354a31bf3665ee1d1caba68923e38f
    type: enters
    zone: zone.screwfix
    trigger: device
  conditions: []
  actions:
  - data:
      event: HA_trigger_calendar
      value1: Entered Screwfix
      value2: Unit 1, Sutton Trade Park, Off Kimpton Park Way, Oldfields Rd, Sutton
        SM3 9DA
    action: ifttt.trigger
  mode: single
- id: '1724261234584'
  alias: Calendar IFTTT Marcus enter Tesco
  description: ''
  triggers:
  - device_id: 324998ffb948ed02379e230c280bc738
    domain: device_tracker
    entity_id: 98354a31bf3665ee1d1caba68923e38f
    type: enters
    zone: zone.tesco
    trigger: device
  conditions: []
  actions:
  - data:
      event: HA_trigger_calendar
      value1: Entered Tesco
      value2: 55 Oldfields Rd, Sutton SM1 2NB
    action: ifttt.trigger
  mode: single
- id: '1724261277522'
  alias: Calendar IFTTT Marcus enter The Hope
  description: ''
  triggers:
  - device_id: 324998ffb948ed02379e230c280bc738
    domain: device_tracker
    entity_id: 98354a31bf3665ee1d1caba68923e38f
    type: enters
    zone: zone.the_hope
    trigger: device
  conditions: []
  actions:
  - data:
      event: HA_trigger_calendar
      value1: Entered The Hope
      value2: 48 West St, Carshalton SM5 2PR
    action: ifttt.trigger
  mode: single
- id: '1724261342636'
  alias: Calendar IFTTT Marcus leaves The Hope
  description: ''
  trigger:
  - platform: device
    device_id: 324998ffb948ed02379e230c280bc738
    domain: device_tracker
    entity_id: 98354a31bf3665ee1d1caba68923e38f
    type: leaves
    zone: zone.the_hope
  condition: []
  action:
  - service: ifttt.trigger
    data:
      event: HA_trigger_calendar
      value1: Left The Hope
  mode: single
- id: '1724261461321'
  alias: Calendar IFTTT Marcus leaves Tesco
  description: ''
  trigger:
  - platform: device
    device_id: 324998ffb948ed02379e230c280bc738
    domain: device_tracker
    entity_id: 98354a31bf3665ee1d1caba68923e38f
    type: leaves
    zone: zone.tesco
  condition: []
  action:
  - service: ifttt.trigger
    data:
      event: HA_trigger_calendar
      value1: Left Tesco
  mode: single
- id: '1724261571070'
  alias: Calendar IFTTT Marcus returns Home
  description: ''
  triggers:
  - device_id: 324998ffb948ed02379e230c280bc738
    domain: device_tracker
    entity_id: 98354a31bf3665ee1d1caba68923e38f
    type: enters
    zone: zone.home
    trigger: device
  conditions: []
  actions:
  - data:
      event: HA_trigger_calendar
      value1: Returned Home
      value2: 14 Farmington Ave, Sutton SM1 3PT
    action: ifttt.trigger
  mode: single
- id: '1724261610598'
  alias: Calendar IFTTT Marcus leaves Home
  description: ''
  trigger:
  - platform: device
    device_id: 324998ffb948ed02379e230c280bc738
    domain: device_tracker
    entity_id: 98354a31bf3665ee1d1caba68923e38f
    type: leaves
    zone: zone.home
  condition: []
  action:
  - service: ifttt.trigger
    data:
      event: HA_trigger_calendar
      value1: Leaves Home
  mode: single
- id: '1727682293238'
  alias: 'Energy: Battery: Charge Reduction'
  description: 'This is a simple automation that sets the charge current to 4A above
    93% SoC and then increases it backs to 35A (the default max setting) when the
    battery drops below 90%.

    https://foxesscommunity.com/viewtopic.php?t=946'
  trigger:
  - platform: time_pattern
    minutes: /10
  condition:
  - condition: or
    conditions:
    - condition: numeric_state
      entity_id: sensor.workshop_battery_soc
      below: 90
    - condition: numeric_state
      entity_id: sensor.workshop_battery_soc
      above: 93
  action:
  - if:
    - condition: numeric_state
      entity_id: sensor.workshop_battery_soc
      above: 92
    then:
    - if:
      - condition: numeric_state
        entity_id: sensor.workshop_max_charge_current
        above: 10
      then:
      - service: number.set_value
        data:
          value: 4
        target:
          entity_id: number.workshop_max_charge_current
      - service: logbook.log
        data:
          message: Setting Max Charge to 4A
          name: Max Charge
    else:
    - if:
      - condition: numeric_state
        entity_id: sensor.workshop_battery_soc
        below: 90
      then:
      - if:
        - condition: numeric_state
          entity_id: sensor.workshop_max_charge_current
          below: 10
        then:
        - service: number.set_value
          data:
            value: 35
          target:
            entity_id: number.workshop_max_charge_current
        - service: logbook.log
          data:
            message: Setting Max Charge to 35A
            name: Max Charge
  mode: single
- id: '1731914318980'
  alias: Email warning - workshop heater
  description: ''
  triggers:
  - entity_id:
    - sensor.heater_current_consumption
    for:
      hours: 0
      minutes: 0
      seconds: 30
    above: 500
    trigger: numeric_state
  conditions: []
  actions:
  - data:
      message: Heater is running current power {{ states('sensor.heater_current_consumption')
        }}W,  So far today it's used {{states('sensor.heater_today_s_consumption')
        }} KWh
      title: Check heater in workshop
    action: notify.marcus_email
  mode: single
- id: '1731915273289'
  alias: Email warning - Iris' room
  description: ''
  triggers:
  - entity_id:
    - sensor.iriss_room_current_consumption
    for:
      hours: 0
      minutes: 0
      seconds: 30
    above: 500
    trigger: numeric_state
  - entity_id:
    - sensor.iriss_room_today_energy
    above: 2
    trigger: numeric_state
  conditions: []
  actions:
  - data:
      message: Her room's current power {{ states('sensor.iriss_room_current_consumption')
        }}W,  So far today it's used {{states('sensor.iriss_room_today_s_consumption')
        }}kWh
      title: Check Iris' room for anything left on
    action: notify.marcus_email
  mode: single
- id: '1733254185943'
  alias: 'Energy: Battery: Max SoC according to the alternative cooking value'
  description: Sets the Max SoC according to the alternative cooking value
  trigger:
  - platform: time
    at: '14:55:00'
    variables:
      maxSoC: '{{ states(''input_number.max_soc_day_alternative_cooking'') | float(states(''number.workshop_min_soc''))
        }}'
  condition:
  - condition: template
    value_template: "{{ states('sensor.oven_today_energy')|float(0) >=\n     states('input_number.energy_trigger_cooking')|float(0)
      }}"
  action:
  - service: number.set_value
    target:
      entity_id: number.workshop_max_soc
    data:
      value: '{{ maxSoC }}'
  - service: notify.marcus_email
    data:
      message: Oven current power {{ states('sensor.oven_current_power') }}W, so far
        today it's used {{ states('sensor.oven_today_energy') }}kWh and the heater
        in the workshop is currently using {{ states('sensor.heater_current_power')
        }}W, so far today it's used {{ states('sensor.heater_today_energy') }}kWh
        Either one of these has triggered Max SoC to now be set to {{ states('number.workshop_max_soc')
        }}% (instead of normal Max SoC DAY {{ states('input_number.max_soc_day') }}%).
        The Battery SoC is currently {{ states('sensor.workshop_battery_soc') }}%
        (so there's a {{ states('sensor.workshop_battery_soc')|float(0) - states('number.workshop_max_soc')|float(0)  }}%
        difference there before 4pm peak starts in about an hour.)
      title: Bumped up Max SoC Day as looks like we're cooking or using heater
  mode: single
- id: '1737056136655'
  alias: Email warning - Breville
  description: ''
  triggers:
  - entity_id:
    - sensor.breville_current_consumption
    for:
      hours: 0
      minutes: 0
      seconds: 30
    above: 500
    trigger: numeric_state
  - entity_id:
    - sensor.breville_today_energy
    above: 1
    trigger: numeric_state
  conditions: []
  actions:
  - data:
      message: It's current power = {{ states('sensor.breville_current_consumption')
        }}W,  So far today it's used {{states('sensor.breville_today_s_consumption')
        }}kWh
      title: Check kitchen and make sure Breville not left on by mistake
    action: notify.marcus_email
  mode: single
- id: '1738323900814'
  alias: Email warning - workshop hot water heater
  description: ''
  triggers:
  - entity_id:
    - sensor.water_heater_current_consumption
    for:
      hours: 0
      minutes: 3
      seconds: 0
    above: 1000
    trigger: numeric_state
    attribute: curr
  - entity_id:
    - sensor.water_heater_today_energy
    above: 1
    trigger: numeric_state
  conditions: []
  actions:
  - data:
      message: It's currently using {{ states('sensor.water_heater_current_consumption')
        }} W,  So far today it's used {{states('sensor.water_heater_today_s_consumptiony')
        }} kWh
      title: Check workshop hot water
    action: notify.marcus_email
  mode: single
- id: '1740657511428'
  alias: 'Energy: set Max SoC ECO based on tomorrow''s PV forecast'
  description: Sets the Max SoC ECO according to the forecast for tomorrow
  triggers:
  - at: '22:15:00'
    trigger: time
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: numeric_state
        entity_id: sensor.solcast_pv_forecast_forecast_tomorrow
        above: input_number.pv_forecasthigh_threshold
      sequence:
      - target:
          entity_id: input_number.max_soc_eco
        data:
          value: '{{ states(''input_number.max_soc_eco_high'') | float(0) }}'
        action: input_number.set_value
      - data:
          message: Setting Max SoC ECO to {{ states('input_number.max_soc_eco_high')
            }}% as PV forcast is {{ states('sensor.solcast_pv_forecast_forecast_tomorrow')
            }}kWh
          name: Max SoC ECO
        action: logbook.log
    - conditions:
      - condition: numeric_state
        entity_id: sensor.solcast_pv_forecast_forecast_tomorrow
        above: input_number.pv_forecastmed_threshold
      sequence:
      - target:
          entity_id: input_number.max_soc_eco
        data:
          value: '{{ states(''input_number.max_soc_eco_medium'') | float(0) }}'
        action: input_number.set_value
      - data:
          message: Setting Max SoC ECO to {{ states('input_number.max_soc_eco_medium')
            }}% as PV forcast is {{ states('sensor.solcast_pv_forecast_forecast_tomorrow')
            }}kWh
          name: Max SoC ECO
        action: logbook.log
    - conditions:
      - condition: numeric_state
        entity_id: sensor.solcast_pv_forecast_forecast_tomorrow
        above: input_number.pv_forecastlow_threshold
      sequence:
      - target:
          entity_id: input_number.max_soc_eco
        data:
          value: '{{ states(''input_number.max_soc_eco_low'') | float(0) }}'
        action: input_number.set_value
      - data:
          message: Setting Max SoC ECO to {{ states('input_number.max_soc_eco_low')
            }}% as PV forcast is {{ states('sensor.solcast_pv_forecast_forecast_tomorrow')
            }}kWh
          name: Max SoC ECO
        action: logbook.log
    default:
    - target:
        entity_id: input_number.max_soc_eco
      data:
        value: '{{ states(''input_number.max_soc_eco_default'') | float(0) }}'
      action: input_number.set_value
    - data:
        message: Setting Max SoC EC to default {{ states('input_number.max_soc_eco_default')
          }}% PV forcast is {{ states('sensor.solcast_pv_forecast_forecast_tomorrow')
          }}kWh - check why default?
        name: Max SoC ECO
      action: logbook.log
  - data:
      event: HA_trigger_calendar
      value1: Max SoC ECO = {{ states('input_number.max_soc_eco') }}% PV forecast
        {{ states('sensor.solcast_pv_forecast_forecast_tomorrow') }}kWh
    action: ifttt.trigger
  - data:
      event: HA_trigger_sheet
      value1: PV Forecasts setting Max SoC ECO
      value2: Tomorrow PV forecast {{ states('sensor.solcast_pv_forecast_forecast_tomorrow')
        }}kWh
      value3: Todays actual PV {{ states('sensor.generation_today') }}kWh
    action: ifttt.trigger
  - data:
      message: Tomorrow's forecast PV = {{ states('sensor.solcast_pv_forecast_forecast_tomorrow')
        }} kWh Max SoC ECO set to {{ states('input_number.max_soc_eco') }}% for the
        overnight charge.
    action: notify.marcus_email
  mode: single
- id: '1740673832275'
  alias: 'Energy: Reset the Max SoC ECO to default'
  description: ''
  triggers:
  - at: input_datetime.off_peak_energy_end
    trigger: time
  conditions: []
  actions:
  - target:
      entity_id: input_number.max_soc_eco
    data:
      value: '{{ states(''input_number.max_soc_eco_default'') | float(0) }}'
    action: input_number.set_value
  mode: single
- id: '1741125922921'
  alias: Turn on CCTV monitor if Door Bell Visitor or Motion
  description: ''
  triggers:
  - type: turned_on
    device_id: 0c2fa370e19dd3120be880febd2d14f6
    entity_id: 50e653e2427c85a49849fc380565e847
    domain: binary_sensor
    trigger: device
  - type: turned_on
    device_id: ed8196c4147532e4780086f763a2e05b
    entity_id: 13177e10c566ef33b8df73a66cfc8be3
    domain: binary_sensor
    trigger: device
  - type: turned_on
    device_id: 7f1ef56e2b8635650c5a6ad50a39a584
    entity_id: 3b532fb35c3b4a0093384dbcc03b2b0c
    domain: binary_sensor
    trigger: device
  - type: turned_on
    device_id: 7f1ef56e2b8635650c5a6ad50a39a584
    entity_id: e0a6b98cc516f49ffb18b557b70523c4
    domain: binary_sensor
    trigger: device
  conditions:
  - condition: state
    entity_id: switch.cctv_monitor
    state: 'off'
  - condition: or
    conditions:
    - type: is_motion
      condition: device
      device_id: e9ff0e951af08702378e8bf81e1492d6
      entity_id: 5a3f0a5f4c35d8326e4940fc7a18797b
      domain: binary_sensor
    - type: is_motion
      condition: device
      device_id: 66f8ba89b3dd4149144463e123f0ed25
      entity_id: a2b5ee099dece23a3089a04f3ecfc744
      domain: binary_sensor
  actions:
  - type: turn_on
    device_id: e089e21f12d388d802c0e4178bd386fc
    entity_id: 895db067f32fc3cb9213ae38b659a529
    domain: switch
  - delay:
      hours: 0
      minutes: 5
      seconds: 0
      milliseconds: 0
  - type: turn_off
    device_id: e089e21f12d388d802c0e4178bd386fc
    entity_id: 895db067f32fc3cb9213ae38b659a529
    domain: switch
  mode: restart
- id: '1742382554771'
  alias: 'Energy: set flag to force peak export based on tomorrow''s PV forecast'
  description: Sets the flag to force peak export based on tomorrow's PV forecast
  triggers:
  - at: '22:20:00'
    trigger: time
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: numeric_state
        entity_id: sensor.solcast_pv_forecast_forecast_tomorrow
        above: input_number.input_number_pv_forecastpeak_export_threshold
      sequence:
      - action: input_boolean.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.peak_tariff_export_enabled
    default:
    - action: input_boolean.turn_off
      metadata: {}
      data: {}
      target:
        entity_id: input_boolean.peak_tariff_export_enabled
  - data:
      message: Tomorrow's forecast PV = {{ states('sensor.solcast_pv_forecast_forecast_tomorrow')
        }} kWh so the flag to export during peak tariff set to {{ states('input_boolean.peak_tariff_export_enabled')
        }} for tomorrow.
    action: notify.marcus_email
  mode: single
- id: '1743528120482'
  alias: 'Pool Room: turn TV on if person detected (CCTV)'
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.pool_room_person
    to: 'on'
  conditions:
  - condition: device
    type: is_off
    device_id: e22bd9643a03ccfdd146071f933bceb0
    entity_id: b2dc0da6a18ef1c6696ebfdf8f81b692
    domain: switch
  actions:
  - type: turn_on
    device_id: e22bd9643a03ccfdd146071f933bceb0
    entity_id: b2dc0da6a18ef1c6696ebfdf8f81b692
    domain: switch
  mode: single
- id: '1743575339217'
  alias: 'Switches: Pool room: Turn off TV if no motion detected'
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.pool_room_person
    to: 'off'
    for:
      hours: 0
      minutes: 45
      seconds: 0
  conditions:
  - condition: device
    type: is_on
    device_id: e22bd9643a03ccfdd146071f933bceb0
    entity_id: cd7e44c44030b60a17ea655e6d2cbb1b
    domain: switch
    for:
      hours: 0
      minutes: 30
      seconds: 0
  actions:
  - type: turn_off
    device_id: e22bd9643a03ccfdd146071f933bceb0
    entity_id: cd7e44c44030b60a17ea655e6d2cbb1b
    domain: switch
  mode: single
- id: '1743575766984'
  alias: 'Switches: Pool room: Turn on lamp if dark and motion detected'
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.pool_room_person
    to: 'on'
  conditions:
  - condition: sun
    before: sunrise
  actions:
  - action: scene.turn_on
    metadata: {}
    data: {}
    target:
      entity_id: scene.pool_room_light_blue
  - delay:
      hours: 0
      minutes: 10
      seconds: 0
      milliseconds: 0
  - type: turn_off
    device_id: 884f68553e69441148296ac281012994
    entity_id: 48390b26e6605aa1e1fd911cfdfcdbec
    domain: light
  mode: single
- id: '1743577499206'
  alias: 'Switches: Pool room: Turn off lamp if dark and no motion detected'
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.pool_room_person
    to: 'off'
    for:
      hours: 0
      minutes: 10
      seconds: 0
  conditions:
  - condition: sun
    before: sunrise
  actions:
  - type: turn_off
    device_id: 884f68553e69441148296ac281012994
    entity_id: 5cc569e56eaaa8d4271a4104472edab6
    domain: light
  mode: single
- id: '1743577751018'
  alias: 'Switches: Garden: Turn on corridor (add to calendar) if dark and person
    detected (CCTV)'
  description: Activates scene to light corridor if person detected before sunrise
    and it's currently off. It then uses the IFTTT applet to make calender entry.
  triggers:
  - entity_id: binary_sensor.garden_person
    to: 'on'
    trigger: state
  conditions:
  - condition: sun
    before: sunrise
  - condition: template
    value_template: "{{ \n  is_state('light.pool_east', 'off') and\n  is_state('light.workshop_west',
      'off') and\n  is_state('light.patio_east', 'off')\n}}\n"
  actions:
  - target:
      entity_id: scene.garden_corridor_50
    action: scene.turn_on
    data: {}
  - delay: 00:01:00
  - target:
      entity_id: scene.garden_off
    action: scene.turn_on
    data: {}
  - data:
      event: HA_trigger_calendar
      value1: '[Garden] has detected a person at {{ now().strftime(''%H:%M'') }}'
      value2: 14 Farmington Ave, Sutton SM1 3PT
    action: ifttt.trigger
  mode: restart
- id: '1744037903514'
  alias: Morning Reset
  description: ''
  triggers:
  - at: 05:30:00
    trigger: time
  - event: sunrise
    offset: -00:10:00
    trigger: sun
  actions:
  - target:
      entity_id: input_boolean.overnight_dim_active
    action: input_boolean.turn_off
    data: {}
  mode: single
- id: '1744038635290'
  alias: 'Switches: Landing: dynamic brightness adjustment overnight'
  description: Increase brightness on motion during overnight dim, reduce after both
    sensors clear with a small delay.
  triggers:
  - entity_id:
    - binary_sensor.motion_hallway_occupancy
    - binary_sensor.motion_landing_occupancy
    to: 'on'
    id: motion_on
    trigger: state
  - entity_id:
    - binary_sensor.motion_hallway_occupancy
    - binary_sensor.motion_landing_occupancy
    to: 'off'
    id: motion_off
    trigger: state
  conditions:
  - condition: state
    entity_id: input_boolean.overnight_dim_active
    state: 'on'
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id: motion_on
      sequence:
      - target:
          entity_id: scene.landing_hall_on
        action: scene.turn_on
      - target:
          entity_id: light.controller_rgb_c1f45a
        data:
          brightness_pct: 80
        action: light.turn_on
    - conditions:
      - condition: trigger
        id: motion_off
      sequence:
      - delay: 00:00:05
      - condition: and
        conditions:
        - condition: state
          entity_id: binary_sensor.motion_hallway_occupancy
          state: 'off'
        - condition: state
          entity_id: binary_sensor.motion_landing_occupancy
          state: 'off'
      - target:
          entity_id: scene.landing_hall_off
        action: scene.turn_on
      - target:
          entity_id: light.controller_rgb_c1f45a
        data:
          brightness_pct: 3
        action: light.turn_on
  mode: restart
- id: '1744039170743'
  alias: 'Switches: Kitchen: dynamic lighting on motion'
  description: Turn on kitchen lights on motion, dim after clear with small delay.
  triggers:
  - entity_id: binary_sensor.motion_kitchen_occupancy
    to: 'on'
    id: motion_on
    trigger: state
  - entity_id: binary_sensor.motion_kitchen_occupancy
    to: 'off'
    id: motion_off
    trigger: state
  conditions:
  - condition: state
    entity_id: input_boolean.overnight_dim_active
    state: 'on'
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id: motion_on
      sequence:
      - target:
          entity_id:
          - light.kitchen_floor_strip_light
          - light.kitchen_fridge_light_strip
        data:
          brightness_pct: 100
        action: light.turn_on
    - conditions:
      - condition: trigger
        id: motion_off
      sequence:
      - delay: 00:00:05
      - condition: state
        entity_id: binary_sensor.motion_kitchen_occupancy
        state: 'off'
      - target:
          entity_id:
          - light.kitchen_floor_strip_light
          - light.kitchen_fridge_light_strip
        data:
          brightness_pct: 3
        action: light.turn_on
  mode: restart
- id: '1744039224088'
  alias: 'Switches: Utility Room: dynamic lighting on motion'
  description: Turn on utility room light on motion, dim after clear with small delay.
  triggers:
  - entity_id: binary_sensor.motion_utility_occupancy
    to: 'on'
    id: motion_on
    trigger: state
  - entity_id: binary_sensor.motion_utility_occupancy
    to: 'off'
    id: motion_off
    trigger: state
  conditions:
  - condition: state
    entity_id: input_boolean.overnight_dim_active
    state: 'on'
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id: motion_on
      sequence:
      - target:
          entity_id: light.controller_rgb_c1f544
        data:
          brightness_pct: 60
        action: light.turn_on
    - conditions:
      - condition: trigger
        id: motion_off
      sequence:
      - delay: 00:00:05
      - condition: state
        entity_id: binary_sensor.motion_utility_occupancy
        state: 'off'
      - target:
          entity_id: light.controller_rgb_c1f544
        data:
          brightness_pct: 3
        action: light.turn_on
  mode: restart
- id: '1744040652495'
  alias: 'Safety: Breville turn off if no kitchen occupancy'
  description: Turn off Breville if kitchen empty for 5 mins while in use.
  triggers:
  - entity_id:
    - binary_sensor.motion_kitchen_occupancy
    to: Clear
    for:
      minutes: 5
    trigger: state
  conditions:
  - condition: numeric_state
    entity_id: sensor.breville_current_power
    above: 500
  actions:
  - target:
      entity_id: switch.breville
    action: switch.turn_off
    data: {}
  - data:
      title: Breville Auto Turn-Off
      message: 'The Breville was turned off automatically after 5 minutes of no kitchen
        activity. Current power before shutdown: {{ states(''sensor.breville_current_power'')
        }}W.'
    action: notify.marcus_email
  mode: single
- id: '1744108621901'
  alias: 'Energy: Daily: Update Octopus Energy Tariffs'
  description: Run daily at 7am to update import/export rates from Octopus Energy.
  triggers:
  - at: 07:00:00
    trigger: time
  actions:
  - action: script.update_octopus_energy_tariffs_with_change_detection
    data: {}
  mode: single
- id: '1744194965918'
  alias: 'Switches: Landing: dynamic evening after sunset'
  description: Increase brightness on motion during overnight dim, reduce after both
    sensors clear with a small delay.
  triggers:
  - entity_id:
    - binary_sensor.motion_hallway_occupancy
    - binary_sensor.motion_landing_occupancy
    to: 'on'
    id: motion_on
    trigger: state
  - entity_id:
    - binary_sensor.motion_hallway_occupancy
    - binary_sensor.motion_landing_occupancy
    to: 'off'
    id: motion_off
    trigger: state
  conditions:
  - condition: state
    entity_id: input_boolean.overnight_dim_active
    state: 'off'
  - condition: sun
    after: sunset
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id: motion_on
      sequence:
      - target:
          entity_id:
          - scene.landing_on_bright
        action: scene.turn_on
        data: {}
    - conditions:
      - condition: trigger
        id: motion_off
      sequence:
      - delay: 00:00:05
      - condition: and
        conditions:
        - condition: state
          entity_id: binary_sensor.motion_hallway_occupancy
          state: 'off'
        - condition: state
          entity_id: binary_sensor.motion_landing_occupancy
          state: 'off'
      - target:
          entity_id:
          - scene.landing_off
        action: scene.turn_on
        data: {}
  mode: restart
- id: '1744685643551'
  alias: 'Switches: Utility: dynamic evening after sunset'
  description: Increase brightness on motion after sunset, reduce after sensor clears
    with a small delay.
  triggers:
  - entity_id:
    - binary_sensor.motion_utility_occupancy
    to: 'on'
    id: motion_on
    trigger: state
  - entity_id:
    - binary_sensor.motion_utility_occupancy
    to: 'off'
    id: motion_off
    trigger: state
  conditions:
  - condition: state
    entity_id: input_boolean.overnight_dim_active
    state: 'off'
  - condition: sun
    after: sunset
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id: motion_on
      sequence:
      - target:
          entity_id: light.controller_rgb_c1f544
        data:
          brightness_pct: 100
        action: light.turn_on
    - conditions:
      - condition: trigger
        id: motion_off
      sequence:
      - delay: 00:00:05
      - condition: state
        entity_id: binary_sensor.motion_utility_occupancy
        state: 'off'
      - target:
          entity_id: light.controller_rgb_c1f544
        data:
          brightness_pct: 60
        action: light.turn_on
  mode: restart
- id: '1745249419330'
  alias: Calendar IFTTT Marcus enter Royston Park
  description: ''
  triggers:
  - device_id: 324998ffb948ed02379e230c280bc738
    domain: device_tracker
    entity_id: 98354a31bf3665ee1d1caba68923e38f
    type: enters
    zone: zone.royston_park
    trigger: device
  conditions: []
  actions:
  - data:
      event: HA_trigger_calendar
      value1: Entered Royston Park
      value2: Royston Park, Sutton SM1 3PW
    action: ifttt.trigger
  mode: single
- id: '1746030803787'
  alias: 'Switches: Pool room: Turn on cross trainer fans if hot and motion detected'
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.pool_room_person
    to: 'on'
  conditions:
  - condition: numeric_state
    entity_id: sensor.workshop_temperature
    above: input_number.min_temp_fans_workshop
  actions:
  - type: turn_on
    device_id: c2538969a005b978a1aeeb0549ff0b1d
    entity_id: edfe00f0a39b383316df59be5cc6edd7
    domain: switch
  mode: single
- id: '1746030947407'
  alias: 'Switches: Pool room: Turn off cross trainer fans if no motion detected'
  description: ''
  triggers:
  - trigger: state
    entity_id:
    - binary_sensor.pool_room_person
    to: 'off'
    for:
      hours: 0
      minutes: 15
      seconds: 0
  conditions: []
  actions:
  - type: turn_off
    device_id: c2538969a005b978a1aeeb0549ff0b1d
    entity_id: edfe00f0a39b383316df59be5cc6edd7
    domain: switch
  mode: single
- id: '1748793771021'
  alias: 'Schedules: Bedroom Lamp Schedule'
  description: Full bedroom light automation from 07:00 to 09:00 on weekdays unless
    holiday mode is active
  triggers:
  - minutes: /5
    trigger: time_pattern
  conditions:
  - condition: template
    value_template: '{{ not is_state(''input_boolean.holiday_bedroom_lamp'', ''on'')
      }}'
  - condition: template
    value_template: '{{ now().weekday() in [0, 1, 2, 3, 4] }}'
  actions:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''07:00'' }}'
      sequence:
      - target:
          entity_id: scene.bedroom_light_green_3
        action: scene.turn_on
        data: {}
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''07:20'' }}'
      sequence:
      - target:
          entity_id: scene.bedroom_light_2700k_50
        action: scene.turn_on
        data: {}
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''07:50'' }}'
      sequence:
      - target:
          entity_id: scene.bedroom_light_3200k_25
        action: scene.turn_on
        data: {}
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''08:00'' }}'
      sequence:
      - target:
          entity_id: scene.bedroom_light_4000k_50
        action: scene.turn_on
        data: {}
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''08:30'' }}'
      sequence:
      - target:
          entity_id: scene.bedroom_light_5000k_65
        action: scene.turn_on
        data: {}
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''08:50'' }}'
      sequence:
      - target:
          entity_id: scene.bedroom_light_red_100
        action: scene.turn_on
        data: {}
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''09:00'' }}'
      sequence:
      - target:
          entity_id: scene.bedroom_light_2700k_50
        action: scene.turn_on
        data: {}
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''09:10'' }}'
      sequence:
      - target:
          entity_id: light.bedroom_lamp
        action: light.turn_off
        data: {}
  mode: single
- id: '1748952040030'
  alias: 'Schedules: Fish Tank Lighting'
  description: Turn on fish tank light at 18:30 or 20 minutes before sunset, and off
    at 22:00.
  triggers:
  - at: '18:30:00'
    trigger: time
  - event: sunset
    offset: -00:20:00
    trigger: sun
  - at: '22:00:00'
    trigger: time
  actions:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''22:00'' }}'
      sequence:
      - target:
          entity_id: light.controller_dimmable_bee234
        action: light.turn_off
    default:
    - target:
        entity_id: light.controller_dimmable_bee234
      action: light.turn_on
  mode: single
- id: '1748952936172'
  alias: 'Schedules: Landing Lighting'
  description: 'Landing light control: weekday/weekend mornings, sunset on, and evening
    off.'
  triggers:
  - at: 06:00:00
    trigger: time
  - at: 07:00:00
    trigger: time
  - event: sunrise
    offset: 00:10:00
    trigger: sun
    id: sunrise_offset
  - event: sunset
    offset: -00:10:00
    trigger: sun
    id: sunset_offset
  - at: '22:20:00'
    trigger: time
  conditions:
  - condition: state
    entity_id: input_boolean.holiday_landing_light
    state: 'off'
  actions:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''06:00'' and now().weekday()
          in [0,1,2,3,4] }}

          '
      - condition: sun
        before: sunrise
      sequence:
      - target:
          entity_id: light.landing_light
        action: light.turn_on
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''07:00'' and now().weekday()
          in [5,6] }}

          '
      - condition: sun
        before: sunrise
      sequence:
      - target:
          entity_id: light.landing_light
        action: light.turn_on
    - conditions:
      - condition: trigger
        id: sunrise_offset
      sequence:
      - target:
          entity_id: light.landing_light
        action: light.turn_off
    - conditions:
      - condition: trigger
        id: sunset_offset
      sequence:
      - target:
          entity_id: light.landing_light
        action: light.turn_on
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''22:20'' }}'
      sequence:
      - target:
          entity_id: light.landing_light
        action: light.turn_off
  mode: single
- id: '1748961427071'
  alias: 'Schedules: Garden Lighting'
  description: 'Controls garden lighting: sunrise/morning on, sunset dim, and evening
    off with weekend variant.'
  triggers:
  - at: 06:30:00
    trigger: time
  - at: 07:30:00
    trigger: time
  - event: sunrise
    trigger: sun
  - event: sunset
    trigger: sun
  - at: '21:45:00'
    trigger: time
  - at: '22:20:00'
    trigger: time
  - at: '23:00:00'
    trigger: time
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''06:30'' and now().weekday()
          in [0,1,2,3,4] }}'
      - condition: sun
        before: sunrise
      sequence:
      - target:
          entity_id: scene.garden_on
        action: scene.turn_on
        data: {}
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''07:30'' and now().weekday()
          in [5,6] }}'
      - condition: sun
        before: sunrise
      sequence:
      - target:
          entity_id: scene.garden_on
        action: scene.turn_on
        data: {}
    - conditions:
      - condition: trigger
        id: sunrise
      sequence:
      - target:
          entity_id: scene.garden_off
        action: scene.turn_on
        data: {}
    - conditions:
      - condition: trigger
        id: sunset
      sequence:
      - target:
          entity_id: scene.garden_50
        action: scene.turn_on
        data: {}
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''22:20'' and now().weekday()
          in [0,1,2,3,6] }}'
      sequence:
      - target:
          entity_id: scene.garden_off
        action: scene.turn_on
        data: {}
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''23:00'' and now().weekday()
          in [4,5] }}'
      sequence:
      - target:
          entity_id: scene.garden_off
        action: scene.turn_on
        data: {}
  mode: single
- id: '1748962213931'
  alias: 'Schedules: House Lighting'
  description: Automates LED scenes throughout the house by time and weekday.
  triggers:
  - at: 05:20:00
    trigger: time
  - at: 07:20:00
    trigger: time
  - at: '11:00:00'
    trigger: time
  - at: '16:00:00'
    trigger: time
  - at: '20:00:00'
    trigger: time
  - at: '22:40:00'
    trigger: time
  - at: 00:00:00
    trigger: time
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''05:20'' and now().weekday()
          in [0,1,2,3,4] }}'
      sequence:
      - target:
          entity_id: scene.lighting_green
        action: scene.turn_on
        data: {}
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''07:20'' and now().weekday()
          in [5,6] }}'
      sequence:
      - target:
          entity_id: scene.lighting_green
        action: scene.turn_on
        data: {}
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''11:00'' }}'
      sequence:
      - target:
          entity_id: scene.lighting_blue
        action: scene.turn_on
        data: {}
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''16:00'' }}'
      sequence:
      - target:
          entity_id: scene.lighting_green
        action: scene.turn_on
        data: {}
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''20:00'' }}'
      sequence:
      - target:
          entity_id: scene.lighting_purple
        action: scene.turn_on
        data: {}
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''22:40'' and now().weekday()
          in [0,1,2,3,6] }}'
      sequence:
      - target:
          entity_id: scene.overnight_dim
        action: scene.turn_on
        data: {}
      - target:
          entity_id: input_boolean.overnight_dim_active
        action: input_boolean.turn_on
        data: {}
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''00:00'' and now().weekday()
          in [5,6] }}'
      sequence:
      - target:
          entity_id: scene.overnight_dim
        action: scene.turn_on
        data: {}
      - target:
          entity_id: input_boolean.overnight_dim_active
        action: input_boolean.turn_on
        data: {}
  mode: single
- id: '1748962918075'
  alias: 'Schedules: Extension Lamp (Sunrise & Sunset Edge Cases)'
  description: Controls Tapo L510 lamp on workday mornings before sunrise, and post-sunset
    only if before 19:45.
  triggers:
  - at: 05:50:00
    trigger: time
  - event: sunset
    trigger: sun
  - at: '19:45:00'
    trigger: time
  - event: sunrise
    trigger: sun
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ now().weekday() in [0,1,2,3,4] and now().strftime(''%H:%M'')
          == ''05:50'' and state_attr(''sun.sun'', ''elevation'') < 0 }}'
      sequence:
      - target:
          entity_id: light.extension_lamp
        action: light.turn_on
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == (state_attr(''sun.sun'',
          ''next_setting'') | as_datetime | as_local).strftime(''%H:%M'') and (state_attr(''sun.sun'',
          ''next_setting'') | as_datetime | as_local).strftime(''%H:%M'') < ''19:45''
          }}'
      sequence:
      - target:
          entity_id: light.extension_lamp
        action: light.turn_on
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''19:45'' }}'
      sequence:
      - target:
          entity_id: light.extension_lamp
        action: light.turn_off
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == (state_attr(''sun.sun'',
          ''next_rising'') | as_datetime | as_local).strftime(''%H:%M'') }}'
      sequence:
      - target:
          entity_id: light.extension_lamp
        action: light.turn_off
  mode: single
- id: '1748963661748'
  alias: 'Schedules: Bug Zapper Fixed Times'
  description: Controls Tapo plug for Bug Zapper at fixed times AM and PM.
  triggers:
  - at: 07:00:00
    trigger: time
  - at: '10:00:00'
    trigger: time
  - at: '17:00:00'
    trigger: time
  - at: '20:30:00'
    trigger: time
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''07:00'' or now().strftime(''%H:%M'')
          == ''17:00'' }}'
      sequence:
      - target:
          entity_id: switch.bugzapper
        action: switch.turn_on
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''10:00'' or now().strftime(''%H:%M'')
          == ''20:30'' }}'
      sequence:
      - target:
          entity_id: switch.bugzapper
        action: switch.turn_off
  mode: single
- id: '1748964170424'
  alias: 'Schedules: Bug Zapper Motion Activated (Excludes Fixed ON Periods)'
  description: Turns on bug zapper with kitchen motion between 05:00–22:00, avoids
    auto-OFF during fixed ON periods (07–10, 17–20:30). Outside 22:00–05:00, zapper
    will turn off.
  triggers:
  - entity_id: binary_sensor.motion_kitchen_occupancy
    to: 'on'
    id: motion_on
    trigger: state
  - entity_id: binary_sensor.motion_kitchen_occupancy
    to: 'off'
    for:
      minutes: 10
    id: motion_off
    trigger: state
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id: motion_on
      - condition: time
        after: 05:00:00
        before: '22:00:00'
      sequence:
      - target:
          entity_id: switch.bugzapper
        action: switch.turn_on
    - conditions:
      - condition: trigger
        id: motion_off
      - condition: not
        conditions:
        - condition: or
          conditions:
          - condition: time
            after: 07:00:00
            before: '10:00:00'
          - condition: time
            after: '17:00:00'
            before: '20:30:00'
      sequence:
      - target:
          entity_id: switch.bugzapper
        action: switch.turn_off
  mode: single
- id: '1748964325065'
  alias: 'Schedules: eBike Charger Availability'
  description: Ensures switch.ebike_charger is ON from sunrise until 20:00 every day.
  triggers:
  - event: sunrise
    trigger: sun
  - at: '20:00:00'
    trigger: time
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: sun
        after: sunrise
      sequence:
      - target:
          entity_id: switch.ebike_charger
        action: switch.turn_on
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''20:00'' }}'
      sequence:
      - target:
          entity_id: switch.ebike_charger
        action: switch.turn_off
  mode: single
- id: '1748964712322'
  alias: 'Schedules: Firestick Reboot (Weekly)'
  description: Turns off the Amazon Firestick TV switch every Monday from 05:00 to
    06:00 to force a reset.
  triggers:
  - at: 05:00:00
    trigger: time
  conditions:
  - condition: time
    weekday:
    - mon
  actions:
  - target:
      entity_id: switch.amazon_firestick_tv
    action: switch.turn_off
  - delay:
      hours: 1
  - target:
      entity_id: switch.amazon_firestick_tv
    action: switch.turn_on
  mode: single
- id: '1748964862160'
  alias: 'Schedules: Dishwasher Reboot (Weekly)'
  description: Turns off the Dishwasher switch every Monday from 05:00 to 06:00 to
    force a reset.
  triggers:
  - at: 05:00:00
    trigger: time
  conditions:
  - condition: time
    weekday:
    - mon
  actions:
  - target:
      entity_id: switch.dishwasher
    action: switch.turn_off
  - delay:
      hours: 1
  - target:
      entity_id: switch.dishwasher
    action: switch.turn_on
  mode: single
- id: '1748965468409'
  alias: 'Schedules: Christmas Lights (Dec 1 – Jan 1, with Holiday Overnight)'
  description: Christmas lights ON at sunset and OFF at 23:20 between Dec 1 and Jan
    1, except on 24th, 25th, and 31st Dec when they stay ON until sunrise.
  triggers:
  - event: sunset
    trigger: sun
  - at: '23:20:00'
    trigger: time
  - event: sunrise
    trigger: sun
  conditions:
  - condition: template
    value_template: '{{ (now().month == 12 and now().day >= 1) or (now().month ==
      1 and now().day == 1) }}'
  actions:
  - choose:
    - conditions:
      - condition: sun
        after: sunset
      sequence:
      - target:
          entity_id: switch.christmas_lights
        action: switch.turn_on
    - conditions:
      - condition: template
        value_template: '{{ now().strftime(''%H:%M'') == ''23:20'' }}'
      - condition: template
        value_template: '{{ now().day not in [24, 25, 31] }}'
      sequence:
      - target:
          entity_id: switch.christmas_lights
        action: switch.turn_off
    - conditions:
      - condition: sun
        after: sunrise
      - condition: template
        value_template: '{{ now().day in [24, 25, 31] or (now().month == 1 and now().day
          == 1) }}'
      sequence:
      - target:
          entity_id: switch.christmas_lights
        action: switch.turn_off
  mode: single
- id: '1748967031460'
  alias: 'Schedules: Bedroom Fans (Temp + Time Windows)'
  description: 'Control bedroom fans based on temperature threshold and time windows.

    - Weekdays (Sun–Thu): 21:30-08:00

    - Weekends (Fri–Sat): 22:15–10:00

    - Blocked if override is ON

    '
  triggers:
  - entity_id: binary_sensor.min_temp_fans_bedroom_exceeded
    trigger: state
  - minutes: /5
    trigger: time_pattern
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: input_boolean.bedroom_fan_override_off
        state: 'off'
      - condition: state
        entity_id: binary_sensor.min_temp_fans_bedroom_exceeded
        state: 'on'
      - condition: or
        conditions:
        - condition: and
          conditions:
          - condition: time
            after: '21:30:00'
          - condition: template
            value_template: '{{ now().weekday() in [6, 0, 1, 2, 3] }}'
        - condition: and
          conditions:
          - condition: time
            before: 08:00:00
          - condition: template
            value_template: '{{ now().weekday() in [0, 1, 2, 3, 4] }}'
        - condition: and
          conditions:
          - condition: time
            after: '22:15:00'
          - condition: template
            value_template: '{{ now().weekday() in [4, 5] }}'
        - condition: and
          conditions:
          - condition: time
            before: '10:00:00'
          - condition: template
            value_template: '{{ now().weekday() in [5, 6] }}'
      sequence:
      - target:
          entity_id: switch.bedroom_fans
        action: switch.turn_on
        data: {}
    - conditions: []
      sequence:
      - target:
          entity_id: switch.bedroom_fans
        action: switch.turn_off
        data: {}
  mode: single
- id: '1748968592567'
  alias: 'Schedules: Office Fan (Weekdays Temp + Time)'
  description: 'Controls the office fan Mon–Fri based on temperature and schedule.
    Respects overrides: `override_off` disables auto-control, `override_on` forces
    fan ON.'
  triggers:
  - entity_id: binary_sensor.min_temp_fans_office_exceeded
    trigger: state
  - minutes: /5
    trigger: time_pattern
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: state
        entity_id: input_boolean.office_fan_override_off
        state: 'on'
      sequence:
      - target:
          entity_id: switch.switch_office_light
        action: switch.turn_off
    - conditions:
      - condition: state
        entity_id: input_boolean.office_fan_override_on
        state: 'on'
      sequence:
      - target:
          entity_id: switch.switch_office_light
        action: switch.turn_on
    - conditions:
      - condition: state
        entity_id: binary_sensor.min_temp_fans_office_exceeded
        state: 'on'
      - condition: time
        after: input_datetime.office_start
        before: input_datetime.office_end
      - condition: template
        value_template: '{{ now().weekday() in [0, 1, 2, 3, 4] }}'
      sequence:
      - target:
          entity_id: switch.switch_office_light
        action: switch.turn_on
    - conditions: []
      sequence:
      - target:
          entity_id: switch.switch_office_light
        action: switch.turn_off
  mode: single
- id: '1749827413674'
  alias: 'Switches: Workshop: Blink bulb Green if Door Bell Visitor'
  description: Blinks the workshop alert bulb GREEN for 1 minute when the doorbell
    rings.
  triggers:
  - entity_id: binary_sensor.door_bell_visitor
    to: 'on'
    trigger: state
  conditions: []
  actions:
  - repeat:
      sequence:
      - data:
          rgb_color:
          - 0
          - 255
          - 0
          brightness: 255
        target:
          entity_id: light.alert_bulb
        action: light.turn_on
      - delay: 00:00:01
      - target:
          entity_id: light.alert_bulb
        action: light.turn_off
        data: {}
      - delay: 00:00:01
      until:
      - condition: template
        value_template: '{{ repeat.index >= 30 }}'
  mode: restart
- id: '1749827861501'
  alias: 'Switches: Workshop: Blink bulb Red if Person Detected (Drive East)'
  description: Blinks the workshop alert bulb RED for 30 seconds when a person is
    detected on the Drive East camera.
  triggers:
  - entity_id: binary_sensor.drive_east_person
    to: 'on'
    trigger: state
  conditions: []
  actions:
  - repeat:
      sequence:
      - data:
          rgb_color:
          - 255
          - 0
          - 0
          brightness: 255
        target:
          entity_id: light.alert_bulb
        action: light.turn_on
      - delay: 00:00:01
      - target:
          entity_id: light.alert_bulb
        action: light.turn_off
        data: {}
      - delay: 00:00:01
      until:
      - condition: template
        value_template: '{{ repeat.index >= 15 }}'
  mode: restart
- id: '1749828180660'
  alias: 'Switches: Workshop: Blink bulb Blue if Person Detected in Royston Alley'
  description: Blinks the workshop alert bulb BLUE for 30 seconds when a person is
    detected in Royston Alley.
  triggers:
  - entity_id: binary_sensor.royston_alley_person
    to: 'on'
    trigger: state
  conditions: []
  actions:
  - repeat:
      sequence:
      - data:
          rgb_color:
          - 0
          - 0
          - 255
          brightness: 255
        target:
          entity_id: light.alert_bulb
        action: light.turn_on
      - delay: 00:00:01
      - target:
          entity_id: light.alert_bulb
        action: light.turn_off
        data: {}
      - delay: 00:00:01
      until:
      - condition: template
        value_template: '{{ repeat.index >= 15 }}'
  mode: restart
- id: '1751192747169'
  alias: 'Schedules: Office Fan (Reset Office Fan Override On when fan turned off)'
  description: Turns off the manual override when the office fan switch is turned
    off.
  triggers:
  - entity_id: switch.switch_office_light
    to: 'off'
    trigger: state
  conditions: []
  actions:
  - target:
      entity_id: input_boolean.office_fan_override_on
    action: input_boolean.turn_off
  mode: single
- id: '1751192964216'
  alias: 'Schedules: Office Fan (Turn On Fan When Override On)'
  description: When office_fan_override_on is enabled, turn on the office fan and
    clear override_off.
  triggers:
  - entity_id: input_boolean.office_fan_override_on
    to: 'on'
    trigger: state
  conditions: []
  actions:
  - target:
      entity_id: input_boolean.office_fan_override_off
    action: input_boolean.turn_off
  - target:
      entity_id: switch.switch_office_light
    action: switch.turn_on
  mode: single
- id: '1751193101694'
  alias: 'Schedules: Office Fan (Turn Off Fan When Override Off)'
  description: When office_fan_override_off is enabled, turn off the office fan and
    clear override_on.
  triggers:
  - entity_id: input_boolean.office_fan_override_off
    to: 'on'
    trigger: state
  conditions: []
  actions:
  - target:
      entity_id: input_boolean.office_fan_override_on
    action: input_boolean.turn_off
  - target:
      entity_id: switch.switch_office_light
    action: switch.turn_off
  mode: single
